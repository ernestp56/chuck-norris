{"version":3,"sources":["components/category/category.js","components/categories/categories.js","components/joke-card/joke-card.js","components/random-joke-card/random-joke-card.js","components/search/search.js","App.js","serviceWorker.js","index.js"],"names":["Category","state","joke","fetching","this","setState","fetch","props","category","then","res","json","data","value","className","onClick","fetchRandom","bind","toUpperCase","slice","Component","Categories","categories","map","index","key","listCategories","JokeCard","RandomJokeCard","catch","err","console","log","Search","jokes","searchValue","renderJokes","url","result","length","App","handleKeyDown","e","input","target","type","placeholder","onChange","handleChange","onKeyPress","handleClick","clearInput","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f2fc492.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Category extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { joke: \"\", fetching: false };\r\n    }\r\n\r\n    fetchRandom() {\r\n        this.state.fetching ? this.setState({ fetching: false }) : this.setState({ fetching: true });\r\n        fetch('https://api.chucknorris.io/jokes/random?category=' + this.props.category)\r\n        .then(res => res.json())\r\n        .then(data => this.setState({ joke: data.value, fetching: false }))\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <div className={this.state.fetching ? 'category clicked' : 'category'} onClick={ this.fetchRandom.bind(this) }>\r\n                <div className=\"category-title\">{this.props.category[0].toUpperCase() + this.props.category.slice(1)}</div>\r\n                {this.state.joke ? ( \r\n                    this.state.fetching ? <span className=\"material-icons\">loop</span> : <span>{this.state.joke}</span>\r\n                ) : ( \r\n                    <div className='joke-placeholder'>Click to get a random joke.</div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Category","import React, { Component } from 'react';\r\nimport './categories.css';\r\nimport Category from '../category/category';\r\n\r\nclass Categories extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { categories: [] }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://api.chucknorris.io/jokes/categories')\r\n            .then(res => res.json())\r\n            .then(data => this.setState({ categories: data }))\r\n    }\r\n\r\n    listCategories() {\r\n        return this.state.categories.map((category, index) => {\r\n            return (\r\n                <Category key={ index } category={ category } />\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='category-title'>Categories</div>\r\n                <div className='categories-wrapper'>{this.listCategories()}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Categories","import React, { Component } from 'react';\r\nimport './joke-card.css'\r\n\r\nclass JokeCard extends Component {\r\n    render() {\r\n        return (\r\n            <div className='joke-wrapper'>\r\n                {this.props.fetching ? (\r\n                    <span className=\"material-icons jokeCard\">loop</span>\r\n                ) : (\r\n                    <div>\r\n                        <div className='joke-category'>\r\n                            {this.props.joke.categories ? this.props.joke.categories[0] ? this.props.joke.categories[0][0].toUpperCase() + this.props.joke.categories[0].slice(1) : 'Uncategorized' : 'Uncategorized'}\r\n                        </div>\r\n                        <div>{this.props.joke.value}</div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JokeCard","import React, { Component } from 'react';\r\nimport './random-joke-card.css'\r\nimport JokeCard from '../joke-card/joke-card';\r\n\r\nclass RandomJokeCard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { joke: [], fetching: false }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://api.chucknorris.io/jokes/random')\r\n        .then(res => res.json())\r\n        .then(data => this.setState({ joke: data }))\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    fetchRandom() {\r\n        this.state.fetching ? this.setState({ fetching: false }) : this.setState({ fetching: true });\r\n        fetch('https://api.chucknorris.io/jokes/random')\r\n        .then(res => res.json())\r\n        .then(data => this.setState({ joke: data, fetching: false }))\r\n        // test\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className='container-wrapper random' onClick={this.fetchRandom.bind(this)}>\r\n                <div className='title'>Random Joke</div>\r\n                {this.state.joke ? ( \r\n                    <JokeCard joke = { this.state.joke } fetching = {this.state.fetching} />\r\n                ) : ( \r\n                    <div>loading...</div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandomJokeCard","import React, { Component } from 'react';\r\nimport JokeCard from '../joke-card/joke-card';\r\nimport './search.css'\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({ jokes: [], searchValue: this.props.searchValue })\r\n\r\n        this.renderJokes.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'https://api.chucknorris.io/jokes/search?query=' + this.state.searchValue;\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => this.setState({ jokes: data }))\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    renderJokes() {\r\n        return this.state.jokes.result.map((joke, index) => {\r\n            return (\r\n                <JokeCard key = { index } joke = { joke } />\r\n            ) \r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='container-wrapper'>\r\n                {this.props.searchValue.length > 2 ? (\r\n                    <div>\r\n                        <div className='title'>Searched by word: {this.state.searchValue}</div>\r\n                        <div className='jokes-wrapper'>\r\n                            {this.state.jokes.length !== 0 ? this.renderJokes() : 'loading...'}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <div>Too short search query</div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Categories from './components/categories/categories'\r\nimport RandomJokeCard from './components/random-joke-card/random-joke-card';\r\nimport Search from './components/search/search'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { searchValue: '' };\r\n\r\n    this.handleKeyDown.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ input: e.target.value });\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ searchValue: this.input });\r\n  }\r\n  \r\n  clearInput() {\r\n    this.setState({ searchValue: '', input: '' })\r\n  }\r\n  \r\n  handleKeyDown(e) {\r\n    if (e.key === 'Enter') {\r\n      this.setState({ searchValue: e.target.value });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className='title'>\r\n            Chuck Norris Jokes\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by word...\"\r\n            onChange={this.handleChange.bind(this)}\r\n            onKeyPress={this.handleKeyDown.bind(this)}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            value=\"Search\"\r\n            onClick={this.handleClick.bind(this)}\r\n          />\r\n          {this.state.searchValue ? <div className='container-padding'><input type=\"button\" value=\"Go back to categories\" onClick={this.clearInput.bind(this)} /></div> : <div></div>}\r\n        </header>\r\n        <RandomJokeCard />\r\n        {this.state.searchValue ? (\r\n              <Search searchValue = { this.state.searchValue } />\r\n        ) : (\r\n          <Categories />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}